import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go

# Cargar el archivo CSV
df = pd.read_csv("netflix_users.csv")
df = df.rename(columns={
    "User_ID": "ID_Usuario",
    "Name": "Nombre",
    "Age": "Edad",
    "Country": "PaÃ­s",
    "Subscription_Type": "Tipo_SuscripciÃ³n",
    "Watch_Time_Hours": "Horas_Vistas",
    "Favorite_Genre": "GÃ©nero_Favorito",
    "Last_Login": "Ãšltimo_Inicio_SesiÃ³n"
})

# ConfiguraciÃ³n de la pÃ¡gina
st.set_page_config(page_title="Netflix Users Data", page_icon="ðŸ“Š", layout="wide")

# Imagen inicial
st.image('Netflix.png', caption='Netflix Users Data', use_container_width=True)

# TÃ­tulo y descripciÃ³n
st.title('AnÃ¡lisis de Datos de Usuarios de Netflix')
st.subheader('Explora los insights de los usuarios de Netflix')

#Nombres
st.markdown("### Creado por Ina Gabriela Casab Covarrubias y Leonardo Gamboa Cruz")

# Mostrar los datos

# Inicializar el estado si no existe
if 'mostrar_datos' not in st.session_state:
    st.session_state.mostrar_datos = False

# Cambiar el texto del botÃ³n 
boton_texto = "Ocultar datos" if st.session_state.mostrar_datos else "Mostrar todos los datos"

#Alternar el estado
if st.button(boton_texto):
    st.session_state.mostrar_datos = not st.session_state.mostrar_datos

# Mostrar u ocultar los datos
if st.session_state.mostrar_datos:
    st.subheader("Vista completa de los datos")
    st.dataframe(df)
else:
    st.info("Haz clic en el botÃ³n para mostrar los datos completos.")



# AnÃ¡lisis 1: Edad promedio por paÃ­s con filtro mÃºltiple
st.subheader("Edad Promedio por PaÃ­s")

# Selector de paÃ­ses (multiselecciÃ³n)
paises_disponibles = df['PaÃ­s'].unique()
paises_seleccionados = st.multiselect(
    "Selecciona los paÃ­ses que deseas analizar:",
    options=paises_disponibles,
    default=paises_disponibles  # Por defecto selecciona todos
)

# Filtrar el DataFrame segÃºn los paÃ­ses seleccionados
df_filtrado_paises = df[df['PaÃ­s'].isin(paises_seleccionados)]

# Calcular edad promedio por paÃ­s
edad_promedio_por_pais = df_filtrado_paises.groupby('PaÃ­s')['Edad'].mean().sort_values(ascending=False)

# GrÃ¡fica
fig1 = px.bar(
    edad_promedio_por_pais,
    x=edad_promedio_por_pais.index,
    y=edad_promedio_por_pais.values,
    labels={'x': 'PaÃ­s', 'y': 'Edad Promedio'},
    title="Edad Promedio de Usuarios por PaÃ­s"
)
st.plotly_chart(fig1, use_container_width=True)





# AnÃ¡lisis 2: 

# Obtener lista Ãºnica de paÃ­ses
paises_unicos = df['PaÃ­s'].unique()

# Filtro 
paises_seleccionados = st.multiselect(
    "Selecciona paÃ­s(es)",
    options=paises_unicos,
    default=paises_unicos,
    key="filtro_paises"
)

rango_edad = st.slider(
    "Selecciona el rango de edad",
    min_value=int(df['Edad'].min()),
    max_value=int(df['Edad'].max()),
    value=(18, 60),
    key="filtro_rango_edad"
)

# Filtrar el DataFrame
df_filtrado = df[
    (df['PaÃ­s'].isin(paises_seleccionados)) &
    (df['Edad'] >= rango_edad[0]) & (df['Edad'] <= rango_edad[1])
]

# Agrupar por paÃ­s y edad promedio, sacando promedio de horas vistas
df_agrupado = df_filtrado.groupby(['PaÃ­s', 'Edad'], as_index=False)['Horas_Vistas'].mean()

# GrÃ¡fico de lÃ­neas
st.subheader("RelaciÃ³n entre Edad y Horas Vistas (promedio por edad)")

fig_linea = px.line(
    df_agrupado,
    x="Edad",
    y="Horas_Vistas",
    color="PaÃ­s",
    title="Edad vs. Horas de VisualizaciÃ³n (Promedios)"
)

st.plotly_chart(fig_linea, use_container_width=True)




# AnÃ¡lisis 3: Usuarios por tipo de suscripciÃ³n

st.subheader("DistribuciÃ³n por Tipo de SuscripciÃ³n")

# Filtros interactivos
paises_disponibles = df['PaÃ­s'].unique()
paises_filtro = st.multiselect(
    "Filtrar por paÃ­s:",
    options=paises_disponibles,
    default=paises_disponibles
)

edad_min, edad_max = int(df['Edad'].min()), int(df['Edad'].max())
edad_filtro = st.slider("Filtrar por rango de edad:", min_value=edad_min, max_value=edad_max, value=(edad_min, edad_max))

# Aplicar filtros
df_filtrado = df[
    (df['PaÃ­s'].isin(paises_filtro)) &
    (df['Edad'] >= edad_filtro[0]) &
    (df['Edad'] <= edad_filtro[1])
]

# Contar usuarios por tipo de suscripciÃ³n
suscripciones = df_filtrado['Tipo_SuscripciÃ³n'].value_counts()

# GrÃ¡fica
fig_suscripciones = px.pie(
    names=suscripciones.index,
    values=suscripciones.values,
    title="DistribuciÃ³n de Tipos de SuscripciÃ³n"
)
st.plotly_chart(fig_suscripciones, use_container_width=True)


#AnÃ¡lisis 3.1: horas vistas por tipo de suscripciÃ³n

horas_promedio_suscripcion = df.groupby('Tipo_SuscripciÃ³n')['Horas_Vistas'].mean().reset_index()

# Mostrar el anÃ¡lisis
st.write("### Horas Promedio Vistas por Tipo de SuscripciÃ³n")
st.write(horas_promedio_suscripcion)

# Crear la grÃ¡fica interactiva con Plotly
fig = px.bar(horas_promedio_suscripcion, 
             x='Tipo_SuscripciÃ³n', 
             y='Horas_Vistas', 
             title='Horas Promedio Vistas por Tipo de SuscripciÃ³n',
             labels={'Horas_Vistas': 'Horas Promedio Vistas', 'Tipo_SuscripciÃ³n': 'Tipo de SuscripciÃ³n'},
             text='Horas_Vistas')  # Mostrar el valor de las barras al pasar el mouse

# Mostrar la grÃ¡fica en Streamlit
st.plotly_chart(fig)




# AnÃ¡lisis 4: Usuarios por paÃ­s 
st.subheader("Cantidad de Usuarios por PaÃ­s")

# Filtro para paÃ­ses 
num_paises = st.slider(
    "Selecciona cuÃ¡ntos paÃ­ses quieres mostrar",
    min_value=1,
    max_value=len(df['PaÃ­s'].value_counts()),
    value=10
)

# Contar y ordenar usuarios por paÃ­s
usuarios_por_pais = df['PaÃ­s'].value_counts().sort_values(ascending=False).head(num_paises)

# GrÃ¡ficar
fig4 = px.bar(
    usuarios_por_pais,
    x=usuarios_por_pais.index,
    y=usuarios_por_pais.values,
    labels={'x': 'PaÃ­s', 'y': 'Usuarios'},
    title=f"Top {num_paises} PaÃ­ses con MÃ¡s Usuarios"
)

fig4.update_layout(xaxis_tickangle=-45)

st.plotly_chart(fig4, use_container_width=True)



#Edades con mÃ¡s usuarios 

st.subheader("Top Edades con MÃ¡s Usuarios")

top_n = st.slider("Selecciona cuÃ¡ntas edades mostrar", 5, 20, 10)

edades_mas_comunes = df["Edad"].value_counts().sort_values(ascending=False).head(top_n)

fig_top_edades = px.bar(
    edades_mas_comunes,
    x=edades_mas_comunes.index,
    y=edades_mas_comunes.values,
    labels={"x": "Edad", "y": "Cantidad de Usuarios"},
    title=f"Top {top_n} Edades con MÃ¡s Usuarios"
)

st.plotly_chart(fig_top_edades, use_container_width=True)








#AnÃ¡lisis
#GÃ©nero favorito

st.subheader("AnÃ¡lisis del GÃ©nero Favorito de los Usuarios")

# Filtros propios
paises_genero = df['PaÃ­s'].unique()
paises_genero_seleccionados = st.multiselect("Selecciona paÃ­s(es) para gÃ©nero favorito", options=paises_genero, default=paises_genero)
rango_edad_genero = st.slider(
    "Selecciona el rango de edad para gÃ©nero favorito",
    min_value=int(df['Edad'].min()),
    max_value=int(df['Edad'].max()),
    value=(18, 60)
)

# Filtrar los datos
df_genero = df[
    (df['PaÃ­s'].isin(paises_genero_seleccionados)) &
    (df['Edad'] >= rango_edad_genero[0]) &
    (df['Edad'] <= rango_edad_genero[1])
]

conteo_generos = df_genero['GÃ©nero_Favorito'].value_counts().sort_values(ascending=True)

fig_genero = px.bar(
    x=conteo_generos.values,
    y=conteo_generos.index,
    orientation='h',
    labels={'x': 'Cantidad de Usuarios', 'y': 'GÃ©nero Favorito'},
    title="Preferencias de GÃ©neros por Edad y PaÃ­s"
)

st.plotly_chart(fig_genero, use_container_width=True)

#------------------------------------------


# AnÃ¡lisis: Matriz de correlaciÃ³n gÃ©nero favorito y paÃ­s

st.subheader("CorrelaciÃ³n entre el GÃ©nero Favorito y elrango_edad_calor = st.slider(
    "Selecciona el rango de edad:",
    min_value=int(df['Edad'].min()),
    max_value=int(df['Edad'].max()),
    value=(int(df['Edad'].min()), int(df['Edad'].max())),
    key="matriz_calor_edad"
)

# Filtrar el DataFrame segÃºn los filtros seleccionados
df_calor = df[
    (df['PaÃ­s'].isin(paises_seleccionados_calor)) &
    (df['Edad'] >= rango_edad_calor[0]) &
    (df['Edad'] <= rango_edad_calor[1])
]

# Crear la tabla cruzada
genero_por_pais = df_calor.groupby(['PaÃ­s', 'GÃ©nero_Favorito']).size().unstack(fill_value=0)

# Crear el heatmap con Plotly
fig_heatmap = go.Figure(data=go.Heatmap(
    z=genero_por_pais.values,
    x=genero_por_pais.columns,
    y=genero_por_pais.index,
    colorscale='YlGnBu',
    hoverongaps=False,
    showscale=True
))

fig_heatmap.update_layout(
    title="Preferencia de GÃ©neros por PaÃ­s y Edad",
    xaxis_title="GÃ©nero Favorito",
    yaxis_title="PaÃ­s"
)

# Mostrar en Streamlit
st.plotly_chart(fig_heatmap, use_container_width=True) PaÃ­s")

# Filtros interactivos
paises_calor = df['PaÃ­s'].unique()
paises_seleccionados_calor = st.multiselect(
    "Selecciona los paÃ­ses para visualizar:",
    options=sorted(paises_calor),
    default=list(paises_calor),
    key="matriz_calor_paises"
)


# AnÃ¡lisis: Matriz de correlaciÃ³n gÃ©nero favorito y edad
st.subheader("Matriz de Calor: GÃ©nero Favorito por Edad")

# Filtros interactivos
paises_matriz_edad = df['PaÃ­s'].unique()
paises_seleccionados_matriz_edad = st.multiselect(
    "Selecciona los paÃ­ses para visualizar:",
    options=sorted(paises_matriz_edad),
    default=list(paises_matriz_edad),
    key="matriz_calor_por_edad_paises"
)

rango_edad_matriz = st.slider(
    "Selecciona el rango de edad:",
    min_value=int(df['Edad'].min()),
    max_value=int(df['Edad'].max()),
    value=(int(df['Edad'].min()), int(df['Edad'].max())),
    key="matriz_calor_por_edad_rango"
)

# Filtrar el DataFrame
df_matriz_edad = df[
    (df['PaÃ­s




